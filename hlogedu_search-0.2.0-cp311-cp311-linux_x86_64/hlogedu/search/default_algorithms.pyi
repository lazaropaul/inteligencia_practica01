from .algorithm import Algorithm as Algorithm, Node as Node, Solution as Solution
from .containers import PermanentlyEmptyDict as PermanentlyEmptyDict, PriorityQueue as PriorityQueue, Queue as Queue, Stack as Stack
from .problem import NullHeuristic as NullHeuristic
from _typeshed import Incomplete

def blind_search(problem, max_depth, fringe, generated): ...

class GraphBfs(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth): ...

class TreeBfs(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth): ...

class GraphDfs(Algorithm):
    NAME: str
    fringe: Incomplete
    expanded: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth): ...

class TreeDfs(Algorithm):
    NAME: str
    fringe: Incomplete
    expanded: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth): ...

def informed_search(problem, max_depth, fringe, heuristic, tree, cost_fn, path_max): ...

class GraphUcs(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth): ...

class TreehUcs(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth): ...

class GraphBestH(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth, heuristic): ...

class TreeBestH(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth, heuristic): ...

class GraphAstar(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth, heuristic): ...

class TreeAstar(Algorithm):
    NAME: str
    fringe: Incomplete
    def __init__(self, problem) -> None: ...
    def run(self, max_depth, heuristic): ...
